// Generated by CoffeeScript 1.6.3
var lazy, maxRequestCount, minimatch, moment, s3,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

moment = require('moment');

minimatch = require('minimatch');

lazy = require('lazy.js');

s3 = require('./s3');

maxRequestCount = 10;

module.exports = {
  getMostRecentBackup: function(bucket, prefix, before, glob, callback) {
    var defaults, handler, requestCount;
    if ((prefix == null) && (glob != null) && __indexOf.call(glob, '**') >= 0) {
      prefix = glob.split('**', 1)[0];
    }
    defaults = function(options) {
      return lazy(options || {}).defaults({
        Bucket: bucket,
        Prefix: prefix != null ? prefix : ''
      }).toObject();
    };
    requestCount = 0;
    handler = function(err, objects) {
      var marker, object;
      if (err != null) {
        callback(err);
      }
      requestCount++;
      if (objects != null ? objects.IsTruncated : void 0) {
        marker = objects.NextMarker || objects.Contents[objects.Contents.length - 1].Key;
        if (requestCount > maxRequestCount) {
          callback(new Error("Made over " + maxRequestCount + " requests to S3, aborting"));
        }
        return s3.listObjects(defaults({
          Marker: marker
        }), handler);
      }
      object = lazy((objects != null ? objects.Contents : void 0) || []).filter(function(object) {
        return moment(object.LastModified).isBefore(before);
      }).filter(function(object) {
        if (glob != null) {
          return minimatch(object.Key, glob);
        } else {
          return true;
        }
      }).max('LastModified');
      if (object == null) {
        callback(new Error("Could not find any objects in bucket " + (JSON.stringify(bucket)) + " with prefix " + (JSON.stringify(prefix)) + " modified before " + (moment(before).format('dddd, MMMM Do YYYY, h:mm:ss a ZZ'))));
      }
      return callback(null, object);
    };
    return s3.listObjects(defaults(), handler);
  }
};
